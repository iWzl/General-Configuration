#文件编码，每个配置文件起始位置必须指定该文件的编码格式  
encoding=UTF-8

# Configuration files must begin with a line specifying the encoding
#  of the the file.
#
# NOTE - Please use src/conf/wrapper.conf.in as a template for your
#        own application rather than the values used for the
#        TestWrapper sample.

#********************************************************************
# Wrapper License Properties (Ignored by Community Edition)
#********************************************************************
# Professional and Standard Editions of the Wrapper require a valid
#  License Key to start.  Licenses can be purchased or a trial license
#  requested on the following pages:
# http://wrapper.tanukisoftware.com/purchase
# http://wrapper.tanukisoftware.com/trial

# Include file problems can be debugged by leaving only one '#'
#  at the beginning of the following line:
# 如果包含配置文件出现问题可以使用debug调试模式，去掉一个"#"
##include.debug

# The Wrapper will look for either of the following optional files for a
#  valid License Key.  License Key properties can optionally be included
#  directly in this configuration file.
# 包含子配置文件，可以是配置信息也可以是许可信息  
#include ../conf/wrapper-license.conf
#include ../conf/wrapper-license-%WRAPPER_HOST_NAME%.conf

# The following property will output information about which License Key(s)
#  are being found, and can aid in resolving any licensing problems.
# 是否开启许可文件debug模式
#wrapper.license.debug=TRUE

#********************************************************************
# Wrapper Localization 语言设置
#********************************************************************
# Specify the language and locale which the Wrapper should use.
# 指定Wrapper语言，默认使用系统语言 
#wrapper.lang=en_US # en_US or ja_JP

# Specify the location of the language resource files (*.mo).
#指定Wrapper 语言资源位置，如果该文件不存在则默认设置为en_US
wrapper.lang.folder=../lang

#********************************************************************
# Wrapper Java Properties JAVA运行环境设置
#********************************************************************
# Java Application
#  Locate the java binary on the system PATH:
#  默认使用PATH环境变量配置信息则使用下列配置形式
wrapper.java.command=java

#  Specify a specific java binary:
#  如果想单独配置运行程序，则可采用此种配置方式
#set.JAVA_HOME=/java/path
#wrapper.java.command=%JAVA_HOME%/bin/java

# Tell the Wrapper to log the full generated Java command line.
# Java程序日志级别
wrapper.java.command.loglevel=INFO

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.
#  See the following page for details:
#  http://wrapper.tanukisoftware.com/doc/english/integrate.html
# Java Main class，也就是程序入口    
# 该类需要实现WrapperListener 接口并保证WrapperManager 得到初始化
#   wrapper的主类，可以是org.tanukisoftware.wrapper.WrapperStartStopApp或WrapperSimpleApp 
#   WrapperStartStopApp可以设置应用程序的启动和关闭入口
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperStartStopApp

# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
# Java Classpath配置，必须从序号"1"开始，添加新的jar包后序号递增
wrapper.java.classpath.1=../lib/wrapper.jar
# 应用的Jar包放在第二位
wrapper.java.classpath.2=../src/appService.jar
# 应用依赖的Jar从第三个开始
wrapper.java.classpath.3=../src/appService.jar

# Java Library Path (location of Wrapper.DLL or libwrapper.so)
# Java 类库路径 (Wrapper.DLL 或 libwrapper.so 依赖文件的存放位置)
wrapper.java.library.path.1=../lib

# JVM相关配置
# Java Bits.  On applicable platforms, tells the JVM to run in 32 or 64-bit mode.
# 32/64位选择，true为自动选择  
wrapper.java.additional.auto_bits=TRUE

# Java Additional Parameters
# Java附加参数，若有log4j配置文件，则要添加参数
# ps:wrapper.java.additional.1=-Dlog4j.configuration=../src/config/log4j.properties
# 附加参数即为java命令可选参数
wrapper.java.additional.1=

# Initial Java Heap Size (in MB)
# Java Heap 初始化大小(单位：MB)  
#wrapper.java.initmemory=3

# Maximum Java Heap Size (in MB)
# Java Heap 最大值(单位：MB)  
#wrapper.java.maxmemory=64

#应用程序参数设置

# Application parameters.  Add parameters as needed starting from 1
# 应用程序参数，序号需从"1"开始
# 程序的主函数所在类入口
wrapper.app.parameter.1=

#********************************************************************
# Wrapper Logging Properties Wrapper 日志配置
#********************************************************************
# Enables Debug output from the Wrapper.
# 是否显示debug日志  
# wrapper.debug=TRUE

# Format of output for the console.  (See docs for formats)
# 控制台信息输出格式(格式查看docs文档)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
# 控制台日志级别  
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
# 日志文件位置及名称  
wrapper.logfile=../logs/wrapper.log

# Format of output for the log file.  (See docs for formats)
# 日志文件输出格式  (格式查看docs文档)  
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
# 日志文件日志级别  
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
# 限制日志文件大小，0为不限制，参数：k,m,g等  
wrapper.logfile.maxsize=0

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
# 限制最大日志文件数，0为不限制  
wrapper.logfile.maxfiles=0

# Log Level for sys/event log output.  (See docs for log levels)
# syslog 日志级别  
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper General Properties  Wrapper 基本属性配置
#********************************************************************
# Allow for the use of non-contiguous numbered properties
# 允许使用非连续编号的属性，例如：path的序号可以打乱  
wrapper.ignore_sequence_gaps=TRUE

# Do not start if the pid file already exists.
# 如果pid文件已经存在则不启动程序  
wrapper.pidfile.strict=TRUE

# Title to use when running as a console
# 控制台启动时显示的标题  
wrapper.console.title=Test Wrapper Sample Application

#********************************************************************
# Wrapper JVM Checks Wrapper JVM 检查
#********************************************************************
# Detect DeadLocked Threads in the JVM. (Requires Standard Edition)
# 检测JVM中的死锁线程（需要标准版Wrapper）  
wrapper.check.deadlock=TRUE
#间隔，单位：秒  
wrapper.check.deadlock.interval=10
#出现死锁时处理事件  
wrapper.check.deadlock.action=RESTART
#信息输出级别，FULL:全部;SIMPLE:精简;NONE:无;  
wrapper.check.deadlock.output=FULL

# Out Of Memory detection.
# (Ignore output from dumping the configuration to the console.  This is only needed by the TestWrapper sample application.)
# 内存溢出检测，Wrapper提供了几种不同的匹配机制  
wrapper.filter.trigger.999=wrapper.filter.trigger.*java.lang.OutOfMemoryError
wrapper.filter.allow_wildcards.999=TRUE
wrapper.filter.action.999=NONE
#  Ignore -verbose:class output to avoid false positives.
wrapper.filter.trigger.1000=[Loaded java.lang.OutOfMemoryError
wrapper.filter.action.1000=NONE
# (Simple match)
wrapper.filter.trigger.1001=java.lang.OutOfMemoryError
# (Only match text in stack traces if -XX:+PrintClassHistogram is being used.)
#wrapper.filter.trigger.1001=Exception in thread "*" java.lang.OutOfMemoryError
#wrapper.filter.allow_wildcards.1001=TRUE
wrapper.filter.action.1001=RESTART
wrapper.filter.message.1001=The JVM has run out of memory.

#*********************************************************************
# Wrapper Email Notifications. (Requires Professional Edition) 邮件通知
#*********************************************************************
# Common Event Email settings.
#wrapper.event.default.email.debug=TRUE
#wrapper.event.default.email.smtp.host=<SMTP_Host>
#wrapper.event.default.email.smtp.port=25
#wrapper.event.default.email.subject=[%WRAPPER_HOSTNAME%:%WRAPPER_NAME%:%WRAPPER_EVENT_NAME%] Event Notification
#wrapper.event.default.email.sender=<Sender email>
#wrapper.event.default.email.recipient=<Recipient email>

# Configure the log attached to event emails.
#wrapper.event.default.email.maillog=ATTACHMENT
#wrapper.event.default.email.maillog.lines=50
#wrapper.event.default.email.maillog.format=LPTM
#wrapper.event.default.email.maillog.loglevel=INFO

# Enable specific event emails.
#wrapper.event.wrapper_start.email=TRUE
#wrapper.event.jvm_prelaunch.email=TRUE
#wrapper.event.jvm_start.email=TRUE
#wrapper.event.jvm_started.email=TRUE
#wrapper.event.jvm_deadlock.email=TRUE
#wrapper.event.jvm_stop.email=TRUE
#wrapper.event.jvm_stopped.email=TRUE
#wrapper.event.jvm_restart.email=TRUE
#wrapper.event.jvm_failed_invocation.email=TRUE
#wrapper.event.jvm_max_failed_invocations.email=TRUE
#wrapper.event.jvm_kill.email=TRUE
#wrapper.event.jvm_killed.email=TRUE
#wrapper.event.jvm_unexpected_exit.email=TRUE
#wrapper.event.wrapper_stop.email=TRUE

# Specify custom mail content
wrapper.event.jvm_restart.email.body=The JVM was restarted.\n\nPlease check on its status.\n

#********************************************************************
# Wrapper Windows Service Properties  WINSOWS服务配置
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.

# Name of the service
wrapper.name=testwrapper

# Display name of the service
wrapper.displayname=Test Wrapper Sample Application

# Description of the service
wrapper.description=Test Wrapper Sample Application Description

# Service dependencies.  Add dependencies as needed starting from 1
wrapper.ntservice.dependency.1=

# Mode in which the service is installed.  AUTO_START, DELAY_START or DEMAND_START
wrapper.ntservice.starttype=AUTO_START

# Allow the service to interact with the desktop (Windows NT/2000/XP only).
wrapper.ntservice.interactive=FALSE

